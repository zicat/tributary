/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.zicat.tributary.source.logstash.base.test;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.zicat.tributary.common.records.DefaultRecord;
import org.zicat.tributary.common.records.DefaultRecords;
import org.zicat.tributary.common.records.Record;
import org.zicat.tributary.source.logstash.base.Message;
import org.zicat.tributary.source.logstash.base.MessageFilter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/** DefaultMessageFilter. */
@SuppressWarnings({"rawtypes", "unchecked"})
public class DefaultMessageFilter implements MessageFilter<Object> {

    public static final ObjectMapper MAPPER = new ObjectMapper();

    @Override
    public Collection convert(String topic, Iterator iterator) throws Exception {
        List<Record> records = new ArrayList<>();
        while (iterator.hasNext()) {
            Map data = ((Message<Object>) iterator.next()).getData();
            if (data.containsKey("_test_test")) {
                continue;
            }
            data.put("_test","_test_value");
            records.add(new DefaultRecord(MAPPER.writeValueAsBytes(data)));
        }
        return Collections.singletonList(new DefaultRecords(topic, records));
    }
}
